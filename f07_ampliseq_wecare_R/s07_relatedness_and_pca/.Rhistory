load(file.path(base_folder,"data","s06_qc_filters","s04_check_samples.RData"))
rm(genotypes.mx,variants.df)
# Update folders
base_folder="/Users/alexey/Documents/wecare/final_analysis_2021/reanalysis_afterNov2021/ampliseq/s01_ampliseq_wecare_only"
data_folder <- file.path(base_folder,"data","s07_relatedness_and_pca")
scripts_folder <- file.path(base_folder,"scripts","s07_relatedness_and_pca")
dim(phenotypes.df)
colnames(phenotypes.df)
#str(phenotypes.df)
#table(phenotypes.df$filter)
#phenotypes.df[phenotypes.df$filter=="eigenvectors_outlier","wes_id"]
#"Possibly_related_to_P1-D05" -> phenotypes.df[phenotypes.df$wes_id=="P5_C12","filter"]
# Merge fam-file and phenotypes from the main dataset
# (removing samples that are not in fam-file)
wecare_phenotypes.df <- left_join(wecare_fam.df, phenotypes.df,
by=c("sample.ID"="long_ids"))
dim(wecare_phenotypes.df)
colnames(wecare_phenotypes.df)
#sum(wecare_phenotypes.df$sample.ID == "P5_C12")
# Make sure that dplyr::left_joint hasnt changed the order of samples
sum(wecare_phenotypes.df$sample.ID != wecare_fam.df$sample.ID)
# Add column for outliers
wecare_phenotypes.df <- data.frame(wecare_phenotypes.df,outlier=F)
# Clean-up
rm(phenotypes.df, wecare_fam.df)
# Chunk 5
# map file
wecare_map.df <- wecare.bed$map
dim(wecare_map.df)
head(wecare_map.df)
# make simple counts
wecare_maf.df <- bed_MAF(wecare.bed)
dim(wecare_maf.df)
head(wecare_maf.df)
# merge map file with the counts
wecare_variants.df <- cbind(wecare_map.df,wecare_maf.df)
dim(wecare_variants.df)
head(wecare_variants.df)
# Variants with AF(ref) < AF(alt)
inverted <- wecare_variants.df$ac != wecare_variants.df$mac
sum(inverted)
#wecare_variants.df[inverted,]
# Clean-up
rm(wecare_map.df, wecare_maf.df, inverted)
# Chunk 6
# Get indices of non-outliers in format required by bed_autoSVD
# (integer indices, indicating row numbers)
table(wecare_phenotypes.df$outlier, useNA = "always")
non_outliers1 <- which(!wecare_phenotypes.df$outlier)
length(non_outliers1)
# bigsnpr::bed_autoSVD, Default k = 10
#using non-outlier samples (ind.row) and all variants (ind.col)
#table(wecare.bed$map$chromosome) - if complains abotut non-numeric chromosomes
wecare.svd1 <- bed_autoSVD(wecare.bed,
ind.row=non_outliers1,
ncores = NCORES,
roll.size=0)
# Chunk 7
#ind.col=vars_not_in_LD,
# Variants not in LD (detected by clumping during autoSVD)
vars_not_in_LD1 <- attr(wecare.svd1, "subset")
length(vars_not_in_LD1)
#attributes(wecare.svd)
str(wecare.svd1)
# Eigenvalues
length(wecare.svd1$d)
wecare.svd1$d
plot(wecare.svd1) # default type="screeplot" see ?plot.big_SVD
# Eigenvectors
dim(wecare.svd1$u)
head(wecare.svd1$u)
# PCA summary (for PCs from 1 to 10)
plot(wecare.svd1,type = "scores",scores=1:10,coeff=0.4)
# Loadings
dim(wecare.svd1$v)
head(wecare.svd1$v)
# Loadings summary (for PCs from 1 to 10)
plot(wecare.svd1,type="loadings",loadings=1:10,coeff=0.4)
# Calculate a measure of "outlieness"
U1 <- wecare.svd1$u
prob1 <- prob_dist(U1, ncores=NCORES) # bigutilsr::prob_dist
S1 <- prob1$dist.self / sqrt(prob1$dist.nn)
tukey_threshold1 <- tukey_mc_up(S1) # bigutilsr::tukey_mc_up
# Outliers
outliers1 <- S1 >= tukey_threshold1
sum(outliers1)
# Histogram by "outlieness" score
ggplot() +
geom_histogram(aes(S1), color = "black", fill = "blue", alpha = 0.3) +
theme_bigstatsr() +
geom_vline(xintercept=tukey_threshold1, colour="red") +
labs(x = "Statistic of outlierness (S)", y = "Frequency (sqrt-scale)")
phenotypes_with_PCs.df <- wecare_phenotypes.df
eigenvectors.mx <- wecare.svd1$u
dim(phenotypes_with_PCs.df)
dim(eigenvectors.mx)
colnames(eigenvectors.mx) <-
c("pc1","pc2","pc3","pc4","pc5","pc6","pc7","pc8","pc9","pc10")
phenotypes_with_PCs.df <- cbind(phenotypes_with_PCs.df, eigenvectors.mx)
dim(phenotypes_with_PCs.df)
colnames(phenotypes_with_PCs.df)
# Clean-up
rm(wecare_phenotypes.df, eigenvectors.mx) # vars_not_in_LD1
plink_pcs_file <- file.path(data_folder,"s05_plink_pca","ampliseq_only_20PCs.eigenvec")
plink_pcs.df <- read.table(plink_pcs_file, header=T, sep="\t")
rownames(plink_pcs.df) <- plink_pcs.df$IID
plink_pcs.df <- plink_pcs.df[phenotypes_with_PCs.df$sample.ID,]
dim(plink_pcs.df)
# Check consistency with the previous eigenvectors from WES
plot(plink_pcs.df$PC1,
phenotypes_with_PCs.df$pc1,
main="PC1: PLINK vs bed_autoSVD")
plot(plink_pcs.df$PC2,
phenotypes_with_PCs.df$pc2,
main="PC2: PLINK vs bed_autoSVD")
rm(plink_pcs_file, plink_pcs.df)
sd_threshold <- 6
# PC1 outliers
pc1 <- phenotypes_with_PCs.df$pc1
pc1_mean <- mean(pc1)
pc1_sd  <- sd(pc1)
lo_pc1 <- pc1 < pc1_mean - sd_threshold * pc1_sd
hi_pc1 <- pc1 > pc1_mean + sd_threshold * pc1_sd
cat("pc1 lo/hi:",sum(lo_pc1),"/",sum(hi_pc1),"\n")
phenotypes_with_PCs.df$sample.ID[lo_pc1]
phenotypes_with_PCs.df$sample.ID[hi_pc1]
# PC2 outliers
pc2 <- phenotypes_with_PCs.df$pc2
pc2_mean <- mean(pc2)
pc2_sd  <- sd(pc2)
lo_pc2 <- pc2 < pc2_mean - sd_threshold * pc2_sd
hi_pc2 <- pc2 > pc2_mean + sd_threshold * pc2_sd
cat("pc2 lo/hi:",sum(lo_pc2),"/",sum(hi_pc2),"\n")
phenotypes_with_PCs.df$sample.ID[lo_pc2]
phenotypes_with_PCs.df$sample.ID[hi_pc2]
rm(sd_threshold,
pc1, pc1_mean, pc1_sd, lo_pc1, hi_pc1,
pc2, pc2_mean, pc2_sd, lo_pc2, hi_pc2)
selected_svd <- wecare.svd1
plot(selected_svd, type = "scores") +
aes(color = phenotypes_with_PCs.df$affection == 2) +
labs(title = NULL, color = "Case")
plot(selected_svd, type = "scores", scores=3:4) +
aes(color = phenotypes_with_PCs.df$affection == 2) +
labs(title = NULL, color = "Case")
plot(selected_svd, type = "scores", scores=5:6) +
aes(color = phenotypes_with_PCs.df$affection == 2) +
labs(title = NULL, color = "Case")
plot(selected_svd, type = "scores", scores=7:8) +
aes(color = phenotypes_with_PCs.df$affection == 2) +
labs(title = NULL, color = "Case")
plot(selected_svd, type = "scores", scores=9:10) +
aes(color = phenotypes_with_PCs.df$affection == 2) +
labs(title = NULL, color = "Case")
rm(selected_svd)
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
graphics.off()
# Memory
gc()
# Options
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
# Files and folders
base_folder="/Users/alexey/Documents/wecare/final_analysis_2021/reanalysis_afterNov2021/ampliseq/s01_ampliseq_wecare_only"
data_folder <- file.path(base_folder,"data","s07_relatedness_and_pca")
scripts_folder <- file.path(base_folder,"scripts","s07_relatedness_and_pca")
setwd(scripts_folder)
library(bigsnpr) # for bed_autoSVD() and bed()
library(bigutilsr) # for prob_dist() and tukey_mc_up() for outlier detection
library(hexbin) # for plotting svd loadings
library(ggplot2)
library(dplyr)
NCORES <- 1
#NCORES <- nb_cores() # 2
# Location of bed file
bed_file <- file.path(data_folder,"s02_bed_bim_fam","common_biallelic_autosomal_snps_in_HWE.bed")
# Attach PLINK data to R environment
wecare.bed <- bed(bed_file) # bigsnpr::bed
# Explore wecare.bed
wecare.bed
#names(wecare.bed)
#str(wecare.bed)
#attributes(wecare.bed)
#wecare.bed$bedfile
#wecare.bed$address
# Clean-up
rm(bed_file)
wecare_phenotypes.df <- wecare.bed$fam
dim(wecare_phenotypes.df)
head(wecare_phenotypes.df)
#potential_outliers <- wecare_phenotypes.df$sample.ID %in% c("P6_D05", "P5_E09")
#sum(potential_outliers)
#data_file <- file.path(data_folder,"s04_phenotypes_with_PCs.RData")
#load(data_file)
#dim(updated_phenotypes.df)
#rm(data_file)
# Location of bed file
project_folder="/Users/alexey/Documents/wecare/final_analysis_2021/reanalysis_afterNov2021"
bed_file <- file.path(project_folder,"b37_1kgp","kgp_b37_biallelic_snps_autosomal_common_non_related_no_outliers.bed")
# Read (=attach?) data
kgp.bed <- bed(bed_file) # bigsnpr::bed
kgp.bed
str(kgp.bed)
kgp_samples <- kgp.bed$fam$sample.ID
# Clean-up
rm(bed_file)
data_file <- file.path(project_folder,"b37_1kgp","igsr-1000_genomes_phase_3_release.tsv")
kgp_pop.df <- read.table(data_file, header=T, sep = "\t")
dim(kgp_pop.df)
rownames(kgp_pop.df) <- kgp_pop.df$Sample.name
kgp_pops <- kgp_pop.df[kgp_samples,"Superpopulation.code"]
table(kgp_pops, useNA = "always")
kgp_pops_colours <- kgp_pops
"blue" -> kgp_pops_colours[kgp_pops == "EUR"]
"darkgrey" -> kgp_pops_colours[kgp_pops == "AFR"]
"pink" -> kgp_pops_colours[kgp_pops == "EAS"]
"yellow" -> kgp_pops_colours[kgp_pops == "SAS"]
"orange" -> kgp_pops_colours[kgp_pops == "AMR"]
table(kgp_pops_colours, useNA = "always")
rm(data_file)
wecare_map.df <- wecare.bed$map
dim(wecare_map.df)
kgp_map.df <- kgp.bed$map
dim(kgp_map.df)
x <- inner_join(kgp_map.df, wecare_map.df, by=c("chromosome","physical.pos"))
y <- inner_join(kgp_map.df, wecare_map.df, by=c("chromosome","physical.pos","allele1","allele2"))
dim(x)
head(x)
dim(y)
head(y)
rm(x,y)
# Calculate the "projection"
proj <- bed_projectPCA(kgp.bed, wecare.bed, ncores = NCORES, roll.size=0)
# Explore proj ...
str(proj)
# Get 1KGP PCs
kgen_pcs.mx <- predict(proj$obj.svd.ref)
dim(kgen_pcs.mx)
# Get wecare projections
wecare_pcs.mx <- proj$OADP_proj
dim(wecare_pcs.mx)
# Make colours for the plot
x <- cbind(kgen_pcs.mx[,1:2],kgp_pops_colours)
eur <- x[x[,3]=="blue",]
non_eur <- x[x[,3]!="blue",]
x <- rbind(non_eur,eur)
y <- cbind(wecare_pcs.mx[, 1:2],"red")
z <- rbind(x,y)
# Plot 2 top PC-s
plot(z[,1:2],col=z[,3], xlab="PC1", ylab="PC2",
main="Projecting WECARE w/o Danish to 1KGP\nusing only 160 variants")
text(-5.5,0,"AFR")
text(2,-6,"EAS")
text(0,-1,"AMR/SAS")
text(5,6.5,"EUR")
legend("topleft",legend="WECARE Ampliseq", pch=1, col ="red", bty="n")
text(5,0,"AFR")
text(-1,6,"EAS")
text(-1,1,"AMR/SAS")
text(-2,-3,"EUR")
legend("topright",legend="WECARE Ampliseq", pch=1, col ="red", bty="n")
text(-1,5,"EAS")
# Plot 2 top PC-s
plot(z[,1:2],col=z[,3], xlab="PC1", ylab="PC2",
main="Projecting WECARE w/o Danish to 1KGP\nusing only 160 variants")
text(5,0,"AFR")
text(-1,5,"EAS")
text(-1,1,"AMR/SAS")
text(-2,-3,"EUR")
legend("topright",legend="WECARE Ampliseq", pch=1, col ="red", bty="n")
# Clean-up
rm(x,y,z,eur,non_eur)
# Time
Sys.time()
# Memory
gc()
# Clean up
rm(list=ls())
graphics.off()
# Options
options(stringsAsFactors = F)
# Files and folders
base_folder="/Users/alexey/Documents/wecare/final_analysis_2021/reanalysis_afterNov2021/ampliseq/s01_ampliseq_wecare_only"
data_folder <- file.path(base_folder,"data","s07_relatedness_and_pca")
scripts_folder <- file.path(base_folder,"scripts","s07_relatedness_and_pca")
setwd(scripts_folder)
# Load main data
load(file.path(base_folder,"data","s06_qc_filters","s04_check_samples.RData"))
# Check data
dim(phenotypes.df)
dim(genotypes.mx)
dim(variants.df)
# Update folders (just in case)
base_folder="/Users/alexey/Documents/wecare/final_analysis_2021/reanalysis_afterNov2021/ampliseq/s01_ampliseq_wecare_only"
data_folder <- file.path(base_folder,"data","s07_relatedness_and_pca")
scripts_folder <- file.path(base_folder,"scripts","s07_relatedness_and_pca")
# Remove phenotype data with related and outliers (if any) and without PC-s
colnames(phenotypes.df)
table(phenotypes.df$cc, useNA = "always")
rm(phenotypes.df)
# Load updated phenotypes: without related and outliers (if any) and with PC-s
load(file.path(data_folder,"s06_phenotypes_with_PCs.RData"))
dim(phenotypes_with_PCs.df)
colnames(phenotypes_with_PCs.df)
table(phenotypes_with_PCs.df$cc, useNA = "always")
# Update folders (just in case)
base_folder="/Users/alexey/Documents/wecare/final_analysis_2021/reanalysis_afterNov2021/ampliseq/s01_ampliseq_wecare_only"
data_folder <- file.path(base_folder,"data","s07_relatedness_and_pca")
scripts_folder <- file.path(base_folder,"scripts","s07_relatedness_and_pca")
# Check data
dim(phenotypes_with_PCs.df)
dim(genotypes.mx)
sum(phenotypes_with_PCs.df$sample.ID != colnames(genotypes.mx))
# Update genotypes (just in case?)
genotypes.mx <- genotypes.mx[,phenotypes_with_PCs.df$sample.ID]
dim(genotypes.mx)
# Rename phenotypes data frame
phenotypes.df <- phenotypes_with_PCs.df
# Clean-up
rm(phenotypes_with_PCs.df)
# Function to detect uniform numeric vector
uniformity_check.udf <- function(x){
if (all(is.na(x))){"All_NA"}
else if (min(x,na.rm=T)==max(x,na.rm=T)){"Uniform"}
else {"Non-Uniform"}}
uniformity_check <- apply(genotypes.mx,1,uniformity_check.udf)
summary(as.factor(uniformity_check))
non_uniform_sites <- uniformity_check == "Non-Uniform"
# Update matrices and data-frame(s)
genotypes.mx <- genotypes.mx[non_uniform_sites,]
variants.df <- variants.df[non_uniform_sites,]
# Check result
dim(genotypes.mx)
dim(variants.df)
# Clean-up
rm(uniformity_check.udf,uniformity_check,non_uniform_sites)
# Function to calculate call rate
call_rate.udf <- function(x){1-sum(is.na(x))/length(x)}
# Call rates per variant
var_call_rate <- apply(genotypes.mx,1,call_rate.udf)
min(var_call_rate)
# Variants with low call rate
low_call_rate_variants <- var_call_rate < 0.85
sum(low_call_rate_variants)
# Update matrices and data-frame(s)
genotypes.mx <- genotypes.mx[!low_call_rate_variants,]
variants.df <- variants.df[!low_call_rate_variants,]
# Check result
dim(genotypes.mx)
dim(variants.df)
# Call rates per variant
var_call_rate <- apply(genotypes.mx,1,call_rate.udf)
min(var_call_rate)
hist(var_call_rate, main="Call rate per variant",
xlim=c(0,1), xlab="Call rates")
abline(v=0.85, lty=2, col="red")
plot(var_call_rate, ylim=c(0,1), main="Call rate per variant")
abline(h=0.85, lty=2, col="red")
# Clean-up
rm(var_call_rate, low_call_rate_variants)
# Call rates per sample
case_call_rate <- apply(genotypes.mx,2,call_rate.udf)
min(case_call_rate)
hist(case_call_rate, main="Call rate per sample",
xlim=c(0,1),xlab="Call rates")
abline(v=0.5, lty=2, col="red")
plot(case_call_rate, ylim=c(0,1), main="Call rate per sample")
abline(h=0.5, lty=2, col="red")
low_call_rate_indices <- which(case_call_rate < 0.75)
low_call_rate_values <- case_call_rate[low_call_rate_indices]
low_call_rate_samples <- substr(names(low_call_rate_values),1,3)
low_call_rate_samples
text(x=low_call_rate_indices,y=low_call_rate_values,
labels=low_call_rate_samples,pos=c(1,3,4),
cex=0.7)
# Clean-up
rm(call_rate.udf,case_call_rate,
low_call_rate_indices,low_call_rate_values,low_call_rate_samples)
sum(is.na(genotypes.mx))/(nrow(genotypes.mx)*ncol(genotypes.mx))
genotypes.mx[1:5,1:5]
# Check objects dimensions
dim(genotypes.mx)
dim(phenotypes.df)
dim(variants.df)
table(phenotypes.df$cc, useNA = "always")
# Check that the tables and matrices are in sync
sum(phenotypes.df$wes_id != colnames(genotypes.mx))
sum(variants.df$ID != rownames(genotypes.mx))
# Chunk 1
options(width=999)
# Chunk 2
# Time stamp
Sys.time()
# Clenan-up
rm(list=ls())
graphics.off()
# Memory
gc()
# Options
options(stringsAsFactors = F,
warnPartialMatchArgs = T,
warnPartialMatchAttr = T,
warnPartialMatchDollar = T)
# Files and folders
base_folder="/Users/alexey/Documents/wecare/reanalysis_2022/ampliseq/s01_ampliseq_wecare_only"
data_folder <- file.path(base_folder,"data","s07_relatedness_and_pca")
scripts_folder <- file.path(base_folder,"scripts","s07_relatedness_and_pca")
setwd(scripts_folder)
library(bigsnpr) # for bed_autoSVD() and bed()
library(bigutilsr) # for prob_dist() and tukey_mc_up() for outlier detection
library(hexbin) # for plotting svd loadings
library(ggplot2)
library(dplyr)
NCORES <- 1
#NCORES <- nb_cores() # 2
# Chunk 3
# Location of bed file
bed_file <- file.path(data_folder,"s02_bed_bim_fam","common_biallelic_autosomal_snps_in_HWE.bed")
# Attach PLINK data to R environment
wecare.bed <- bed(bed_file) # bigsnpr::bed
# Explore wecare.bed
wecare.bed
#names(wecare.bed)
#str(wecare.bed)
#attributes(wecare.bed)
#wecare.bed$bedfile
#wecare.bed$address
# Clean-up
rm(bed_file)
# Chunk 4
wecare_phenotypes.df <- wecare.bed$fam
dim(wecare_phenotypes.df)
head(wecare_phenotypes.df)
#potential_outliers <- wecare_phenotypes.df$sample.ID %in% c("P6_D05", "P5_E09")
#sum(potential_outliers)
#data_file <- file.path(data_folder,"s04_phenotypes_with_PCs.RData")
#load(data_file)
#dim(updated_phenotypes.df)
#rm(data_file)
# Chunk 5
# Location of bed file
project_folder="/Users/alexey/Documents/wecare/reanalysis_2022"
bed_file <- file.path(project_folder,"b37_1kgp","kgp_b37_biallelic_snps_autosomal_common_non_related_no_outliers.bed")
# Read (=attach?) data
kgp.bed <- bed(bed_file) # bigsnpr::bed
kgp.bed
str(kgp.bed)
kgp_samples <- kgp.bed$fam$sample.ID
# Clean-up
rm(bed_file)
# Chunk 6
data_file <- file.path(project_folder,"b37_1kgp","igsr-1000_genomes_phase_3_release.tsv")
kgp_pop.df <- read.table(data_file, header=T, sep = "\t")
dim(kgp_pop.df)
rownames(kgp_pop.df) <- kgp_pop.df$Sample.name
kgp_pops <- kgp_pop.df[kgp_samples,"Superpopulation.code"]
table(kgp_pops, useNA = "always")
kgp_pops_colours <- kgp_pops
"blue" -> kgp_pops_colours[kgp_pops == "EUR"]
"darkgrey" -> kgp_pops_colours[kgp_pops == "AFR"]
"pink" -> kgp_pops_colours[kgp_pops == "EAS"]
"yellow" -> kgp_pops_colours[kgp_pops == "SAS"]
"orange" -> kgp_pops_colours[kgp_pops == "AMR"]
table(kgp_pops_colours, useNA = "always")
rm(data_file)
# Chunk 7
wecare_map.df <- wecare.bed$map
dim(wecare_map.df)
kgp_map.df <- kgp.bed$map
dim(kgp_map.df)
x <- inner_join(kgp_map.df, wecare_map.df, by=c("chromosome","physical.pos"))
y <- inner_join(kgp_map.df, wecare_map.df, by=c("chromosome","physical.pos","allele1","allele2"))
dim(x)
head(x)
dim(y)
head(y)
rm(x,y)
# Chunk 8
# Calculate the "projection"
proj <- bed_projectPCA(kgp.bed, wecare.bed, ncores = NCORES, roll.size=0)
# Chunk 9
# Explore proj ...
str(proj)
# proj$obj.svd.ref # big_SVD object computed from reference data.
# Get 1KGP PCs
kgen_pcs.mx <- predict(proj$obj.svd.ref)
dim(kgen_pcs.mx)
# Get wecare projections
wecare_pcs.mx <- proj$OADP_proj
dim(wecare_pcs.mx)
# Make colours for the plot
x <- cbind(kgen_pcs.mx[,1:2],kgp_pops_colours)
eur <- x[x[,3]=="blue",]
non_eur <- x[x[,3]!="blue",]
x <- rbind(non_eur,eur)
y <- cbind(wecare_pcs.mx[, 1:2],"red")
z <- rbind(x,y)
# Plot 2 top PC-s
plot(z[,1:2],col=z[,3], xlab="PC1", ylab="PC2",
main="Projecting WECARE Ampliseq to 1KGP\nusing only 161 variants")
text(5,0,"AFR")
text(-1,5,"EAS")
text(-1,1,"AMR/SAS")
text(-5,-4,"EUR")
text(-5,-6,"EUR")
legend("topright",legend="WECARE Ampliseq", pch=1, col ="red", bty="n")
legend("bottomright",legend="WECARE Ampliseq", pch=1, col ="red", bty="n")
